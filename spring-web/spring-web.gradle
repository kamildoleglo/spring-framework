description = "Spring Web"

apply plugin: "groovy"
apply plugin: "io.spring.dependency-management"

dependencyManagement {
	imports {
		mavenBom "io.projectreactor:reactor-bom:${reactorVersion}"
		mavenBom "io.netty:netty-bom:${nettyVersion}"
	}
	resolutionStrategy {
		cacheChangingModulesFor 0, 'seconds'
	}
	applyMavenExclusions = false
}

configurations {
	patchModule
}

dependencies {
	compile(project(":spring-beans"))
	compile(project(":spring-core"))
	optional(project(":spring-aop"))
	optional(project(":spring-context"))
	optional(project(":spring-oxm"))
	optional("javax.servlet:javax.servlet-api:3.1.0")
	optional("javax.servlet.jsp:javax.servlet.jsp-api:2.3.2-b02")
	optional("javax.el:javax.el-api:3.0.1-b04")
	optional("javax.faces:javax.faces-api:2.2")
	optional("javax.json.bind:javax.json.bind-api:1.0")
	optional("javax.mail:javax.mail-api:1.6.1")
	optional("javax.validation:validation-api:1.1.0.Final")
	optional("javax.xml.bind:jaxb-api:2.3.0")
	optional("javax.xml.ws:jaxws-api:2.3.0")
	optional("io.reactivex:rxjava:${rxjavaVersion}")
	optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}")
	optional("io.reactivex.rxjava2:rxjava:${rxjava2Version}")
	optional("io.netty:netty-all")
	optional("io.projectreactor.ipc:reactor-netty")
	optional("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
	optional("org.eclipse.jetty:jetty-server:${jettyVersion}") {
		exclude group: "javax.servlet", module: "javax.servlet-api"
	}
	optional("org.eclipse.jetty:jetty-servlet:${jettyVersion}") {
		exclude group: "javax.servlet", module: "javax.servlet-api"
	}
	optional("io.undertow:undertow-core:${undertowVersion}")
	optional("com.squareup.okhttp3:okhttp:3.10.0")
	optional("org.apache.httpcomponents:httpclient:4.5.5") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	optional("org.apache.httpcomponents:httpasyncclient:4.1.3") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	optional("commons-fileupload:commons-fileupload:1.3.3")
	optional("org.synchronoss.cloud:nio-multipart-parser:1.1.0")
	optional("com.fasterxml.woodstox:woodstox-core:5.0.3") {  // woodstox before aalto
		exclude group: "stax", module: "stax-api"
	}
	optional("com.fasterxml:aalto-xml:1.0.0")
	optional("com.fasterxml.jackson.core:jackson-databind:${jackson2Version}")
	optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}")
	optional("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson2Version}")
	optional("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jackson2Version}")
	optional("com.google.code.gson:gson:2.8.2")
	optional("com.google.protobuf:protobuf-java-util:3.5.1")
	optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.4")
	optional("com.rometools:rome:1.9.0")
	optional("com.caucho:hessian:4.0.51")
	optional("org.codehaus.groovy:groovy-all:${groovyVersion}")
	optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	testCompile("io.projectreactor:reactor-test")
	testCompile("org.apache.taglibs:taglibs-standard-jstlel:1.2.5") {
		exclude group: "org.apache.taglibs", module: "taglibs-standard-spec"
	}
	testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson2Version}")
	testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}")
	testCompile("com.fasterxml.jackson.module:jackson-module-kotlin:${jackson2Version}")
	testCompile("org.apache.tomcat:tomcat-util:${tomcatVersion}")
	testCompile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
	testCompile("org.eclipse.jetty:jetty-server:${jettyVersion}")
	testCompile("org.eclipse.jetty:jetty-servlet:${jettyVersion}")
	testCompile("com.squareup.okhttp3:mockwebserver:3.10.0")
	testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	testCompile("org.skyscreamer:jsonassert:1.5.0")
	testRuntime("com.sun.mail:javax.mail:1.6.1")
	testRuntime("com.sun.xml.bind:jaxb-core:2.3.0")
	testRuntime("com.sun.xml.bind:jaxb-impl:2.3.0")
	testRuntime("javax.json:javax.json-api:1.1.2")
	testRuntime("org.apache.johnzon:johnzon-jsonb:1.1.7")
	patchModule("com.google.code.findbugs:jsr305:3.0.2")
	patchModule("javax.annotation:javax.annotation-api:1.3.2")
}

compileJava {
	// TODO How to compile only a subset of classes to Java 10/11?
	sourceCompatibility = 10
	targetCompatibility = 10
	// TODO Due to the use of incubating feature which generates a warning, won't be needed with JDK 11
	options.compilerArgs.remove("-Werror")
	// TODO Compile error in IDEA wth message "Error:java: exporting a package from system module java.xml.ws.annotation is not allowed with --release", see See https://bugs.openjdk.java.net/browse/JDK-8178152. Is there a way to avoid "--release" javac parameter in IDEA?
	options.compilerArgs += ["--add-modules", "jdk.incubator.httpclient",
							 "--add-modules", "java.xml.ws",
							 "--add-modules", "java.xml.ws.annotation",
							 // We need to provide absolute path to the jsr305 and annotation-api JARs
							 "--patch-module", "java.xml.ws.annotation=${configurations.patchModule.asPath}",
							 // Sub-packages are not exported by default
							  "--add-exports", "java.xml.ws.annotation/javax.annotation.meta=ALL-UNNAMED"]
}
